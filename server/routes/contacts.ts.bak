import { Express, Request, Response } from "express";
import { db } from "../db.js";
import { politicians, userMessages } from "../../shared/schema.js";
import { eq, and, desc, sql, count } from "drizzle-orm";
import jwt from "jsonwebtoken";
import { ResponseFormatter } from "../utils/responseFormatter.js";

// JWT Auth middleware
function jwtAuth(req: any, res: any, next: any) {
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    return ResponseFormatter.unauthorized(res, "Missing or invalid token");
  }
  try {
    const token = authHeader.split(" ")[1];
    const secret = process.env.SESSION_SECRET;
    if (!secret) {
      return ResponseFormatter.unauthorized(res, "Server configuration error");
    }
    const decoded = jwt.verify(token, secret);
    req.user = decoded;
    next();
  } catch (err) {
    return ResponseFormatter.unauthorized(res, "Invalid or expired token");
  }
}

export function registerContactsRoutes(app: Express) {
  // Populate sample politicians data
  app.post('/api/contacts/populate', async (req: Request, res: Response) => {
    try {
      const samplePoliticians = [
        {
          id: 'politician_1',
          name: 'Justin Trudeau',
          position: 'Prime Minister',
          party: 'Liberal Party of Canada',
          jurisdiction: 'Canada',
          email: 'justin.trudeau@parl.gc.ca',
          phone: '+1-613-992-4211',
          website: 'https://www.parl.gc.ca/MembersOfParliament/ProfileMP.aspx?Key=215829&Language=E',
          socialMedia: {
            twitter: '@JustinTrudeau',
            facebook: 'JustinTrudeau',
            instagram: 'justintrudeau'
          },
          bio: 'Prime Minister of Canada since 2015. Leader of the Liberal Party of Canada.',
          imageUrl: 'https://www.parl.gc.ca/MembersOfParliament/ProfileMP.aspx?Key=215829&Language=E',
          createdAt: new Date(),
          updatedAt: new Date()
        },
        {
          id: 'politician_2',
          name: 'Pierre Poilievre',
          position: 'Leader of the Opposition',
          party: 'Conservative Party of Canada',
          jurisdiction: 'Canada',
          email: 'pierre.poilievre@parl.gc.ca',
          phone: '+1-613-992-6771',
          website: 'https://www.parl.gc.ca/MembersOfParliament/ProfileMP.aspx?Key=215829&Language=E',
          socialMedia: {
            twitter: '@PierrePoilievre',
            facebook: 'PierrePoilievre',
            instagram: 'pierrepoilievre'
          },
          bio: 'Leader of the Conservative Party of Canada and Leader of the Opposition.',
          imageUrl: 'https://www.parl.gc.ca/MembersOfParliament/ProfileMP.aspx?Key=215829&Language=E',
          createdAt: new Date(),
          updatedAt: new Date()
        },
        {
          id: 'politician_3',
          name: 'Jagmeet Singh',
          position: 'Leader of the New Democratic Party',
          party: 'New Democratic Party',
          jurisdiction: 'Canada',
          email: 'jagmeet.singh@parl.gc.ca',
          phone: '+1-613-992-6771',
          website: 'https://www.parl.gc.ca/MembersOfParliament/ProfileMP.aspx?Key=215829&Language=E',
          socialMedia: {
            twitter: '@theJagmeetSingh',
            facebook: 'JagmeetSingh',
            instagram: 'jagmeetsingh'
          },
          bio: 'Leader of the New Democratic Party of Canada.',
          imageUrl: 'https://www.parl.gc.ca/MembersOfParliament/ProfileMP.aspx?Key=215829&Language=E',
          createdAt: new Date(),
          updatedAt: new Date()
        },
        {
          id: 'politician_4',
          name: 'Yves-François Blanchet',
          position: 'Leader of the Bloc Québécois',
          party: 'Bloc Québécois',
          jurisdiction: 'Canada',
          email: 'yves-francois.blanchet@parl.gc.ca',
          phone: '+1-613-992-6771',
          website: 'https://www.parl.gc.ca/MembersOfParliament/ProfileMP.aspx?Key=215829&Language=E',
          socialMedia: {
            twitter: '@yfblanchet',
            facebook: 'YvesFrancoisBlanchet',
            instagram: 'yfblanchet'
          },
          bio: 'Leader of the Bloc Québécois.',
          imageUrl: 'https://www.parl.gc.ca/MembersOfParliament/ProfileMP.aspx?Key=215829&Language=E',
          createdAt: new Date(),
          updatedAt: new Date()
        },
        {
          id: 'politician_5',
          name: 'Elizabeth May',
          position: 'Leader of the Green Party',
          party: 'Green Party of Canada',
          jurisdiction: 'Canada',
          email: 'elizabeth.may@parl.gc.ca',
          phone: '+1-613-992-6771',
          website: 'https://www.parl.gc.ca/MembersOfParliament/ProfileMP.aspx?Key=215829&Language=E',
          socialMedia: {
            twitter: '@ElizabethMay',
            facebook: 'ElizabethMay',
            instagram: 'elizabethmay'
          },
          bio: 'Leader of the Green Party of Canada.',
          imageUrl: 'https://www.parl.gc.ca/MembersOfParliament/ProfileMP.aspx?Key=215829&Language=E',
          createdAt: new Date(),
          updatedAt: new Date()
        }
      ];

      // Clear existing data
      await db.delete(politicians);
      console.log('Cleared existing politicians data');
      
      // Insert sample politicians
      const insertedPoliticians = await db.insert(politicians).values(samplePoliticians).returning();
      console.log(`Successfully inserted ${insertedPoliticians.length} politicians`);
      
      res.json({
        success: true,
        message: `Successfully populated ${insertedPoliticians.length} politicians`,
        count: insertedPoliticians.length
      });
    } catch (error) {
      console.error('Error populating politicians:', error);
      res.status(500).json({ error: 'Failed to populate politicians data' });
    }
  });

  // Get all politicians (as government officials)
  app.get('/api/contacts/officials', async (req: Request, res: Response) => {
    try {
      const officials = await db.select().from(politicians).orderBy(desc(politicians.createdAt));
      
      res.json({
        officials,
        total: officials.length,
        message: "Government officials retrieved successfully"
      });
    } catch (error) {
      res.status(500).json({ error: 'Failed to fetch government officials' });
    }
  });

  // Get officials by jurisdiction
  app.get('/api/contacts/officials/:jurisdiction', async (req: Request, res: Response) => {
    try {
      const { jurisdiction } = req.params;
      const officials = await db.select()
        .from(politicians)
        .where(eq(politicians.constituency, jurisdiction))
        .orderBy(desc(politicians.createdAt));
      
      res.json({
        officials,
        total: officials.length,
        message: `Officials for ${jurisdiction} retrieved successfully`
      });
    } catch (error) {
      res.status(500).json({ error: 'Failed to fetch officials for jurisdiction' });
    }
  });

  // Get contact messages for user
  app.get('/api/contacts/messages', jwtAuth, async (req: Request, res: Response) => {
    try {
      const userId = (req as any).user?.id;
      const messages = await db.select()
        .from(userMessages)
        .where(eq(userMessages.senderId, userId))
        .orderBy(desc(userMessages.createdAt));
      
      res.json({
        messages,
        total: messages.length,
        message: "Contact messages retrieved successfully"
      });
    } catch (error) {
      res.status(500).json({ error: 'Failed to fetch contact messages' });
    }
  });

  // Submit contact message
  app.post('/api/contacts/message', jwtAuth, async (req: Request, res: Response) => {
    try {
      const userId = (req as any).user?.id;
      const { recipientId, subject, message } = req.body;
      
      const newMessage = await db.insert(userMessages).values({
        senderId: userId,
        recipientId,
        subject,
        content: message,
        createdAt: new Date()
      }).returning();
      
      res.json({
        message: newMessage[0],
        success: "Contact message sent successfully"
      });
    } catch (error) {
      res.status(500).json({ error: 'Failed to send contact message' });
    }
  });

  // Get contact statistics
  app.get('/api/contacts/stats', jwtAuth, async (req: Request, res: Response) => {
    try {
      const userId = (req as any).user?.id;
      const [totalMessages, sentMessages, receivedMessages] = await Promise.all([
        db.select({ count: count() }).from(userMessages).where(eq(userMessages.senderId, userId)),
        db.select({ count: count() }).from(userMessages).where(eq(userMessages.senderId, userId)),
        db.select({ count: count() }).from(userMessages).where(eq(userMessages.recipientId, userId))
      ]);
      
      res.json({
        totalMessages: totalMessages[0]?.count || 0,
        sentMessages: sentMessages[0]?.count || 0,
        receivedMessages: receivedMessages[0]?.count || 0,
        message: "Contact statistics retrieved successfully"
      });
    } catch (error) {
      res.status(500).json({ error: 'Failed to fetch contact statistics' });
    }
  });
} 